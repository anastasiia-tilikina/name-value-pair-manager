{"version":3,"sources":["scripts/InputData.js","scripts/Xml.js","scripts/NameValue.js","scripts/NameValueNode.js","scripts/NameValueList.js","scripts/app.js"],"names":["InputData","input","document","querySelector","errorNode","classList","add","innerHTML","error","remove","value","split","map","item","trim","test","module","exports","Xml","list","xmlContainer","openBracket","closeBracket","openTagBracket","tag","closeTagBracket","openCloseBracket","textTag","text","name","join","length","getXml","getEmptyXml","toggle","contains","NameValue","require","NameValueNode","node","getNode","newItem","createElement","id","Date","getTime","checkbox","firstElementChild","checked","NameValueList","render","forEach","append","key","sort","a","b","localeCompare","filter","isChecked","data","from","sortByName","sortByValue","deleteItems","deleteAll","showXML","nameValueList","inputData","addEventListener","e","preventDefault","setInputError","formattedData","push","clear","removeInputError","sortBy","deleteChecked","xml","isShown"],"mappings":"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","file":"app.7c43626f.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nclass InputData {\n  constructor() {\n    this.input = document.querySelector('.from__input');\n    this.errorNode = document.querySelector('.from__error-message');\n  }\n\n  get formattedData() {\n    return this.input.value.split('=').map((item) => item.trim());\n  }\n\n  get error() {\n    const testString = /^[\\s]*[a-z0-9]+[\\s]*[=]\\s*[a-z0-9]+[\\s]*$/gi;\n\n    if (!this.input.value.trim()) {\n      return 'Input can not be empty';\n    }\n\n    if (!testString.test(this.input.value)) {\n      return 'Incorrect input format';\n    }\n\n    return null;\n  }\n\n  setInputError() {\n    this.input.classList.add('from__input--error');\n\n    this.errorNode.innerHTML = this.error;\n    this.errorNode.classList.add('from__error-message--shown');\n  }\n\n  removeInputError() {\n    this.input.classList.remove('from__input--error');\n\n    this.errorNode.classList.remove('from__error-message--shown');\n  }\n\n  clear() {\n    this.input.value = '';\n  }\n}\n\nmodule.exports = { InputData };\n","'use strict';\n\nclass Xml {\n  constructor(list = []) {\n    this.xmlContainer = document.querySelector('.xml');\n    this.list = list;\n  }\n\n  get isShown() {\n    return this.xmlContainer.classList.contains('xml--shown');\n  }\n\n  getXml() {\n    const openBracket = '<span class=\"xml__bracket\">&lt;</span>';\n    const openCloseBracket = '<span class=\"xml__bracket\">&lt;/</span>';\n    const closeBracket = '<span class=\"xml__bracket\">&gt;</span>';\n\n    const openTagBracket = (tag) => (\n      `<span class=\"xml__tag\">${openBracket}${tag}${closeBracket}</span>`\n    );\n\n    const closeTagBracket = (tag) => (\n      `<span class=\"xml__tag\">${openCloseBracket}${tag}${closeBracket}</span>`\n    );\n\n    const textTag = (text) => `<span class=\"xml__text\">${text}</span>`;\n\n    return `\n    <div class=\"xml__line\">\n      ${openBracket}?xml version=\"1.0\" encoding=\"UTF-8\"?${closeBracket}\n    </div>\n\n    <div class=\"xml__container\">\n      <div class=\"xml__line\">\n        ${openTagBracket('list')}\n      </div>\n\n      ${this.list.map(({ name, value }) => (\n    `<div class=\"xml__container\">\n          <div class=\"xml__line\">\n            ${openTagBracket('item')}\n          </div>\n\n          <div class=\"xml__container\">\n            <div class=\"xml__line\">\n              ${openTagBracket('name')}${textTag(name)}${closeTagBracket('name')}\n            </div>\n\n            <div class=\"xml__line\">\n              ${openTagBracket('value')}${textTag(value)}${closeTagBracket('value')}\n            </div>\n          </div>\n\n          <div class=\"xml__line\">\n            ${closeTagBracket('item')}\n          </div>\n        </div>\n          `)).join('')}\n\n      <div class=\"xml__line\">\n        ${closeTagBracket('list')}\n      </div>\n    </div>`;\n  }\n\n  getEmptyXml() {\n    return 'There is no data to show';\n  }\n\n  render() {\n    if (!this.list.length) {\n      this.xmlContainer.innerHTML = this.getEmptyXml();\n\n      return;\n    }\n\n    this.xmlContainer.innerHTML = this.getXml();\n  }\n\n  toggle() {\n    this.xmlContainer.classList.toggle('xml--shown');\n  }\n}\n\nmodule.exports = { Xml };\n","'use strict';\n\nclass NameValue {\n  constructor(name, value) {\n    this.name = name;\n    this.value = value;\n  }\n}\n\nmodule.exports = { NameValue };\n","'use strict';\n\nconst { NameValue } = require('./NameValue.js');\n\nclass NameValueNode extends NameValue {\n  constructor(name, value) {\n    super(name, value);\n    this.node = this.getNode();\n  }\n\n  get isChecked() {\n    const checkbox = this.node.firstElementChild;\n\n    return checkbox.checked;\n  }\n\n  getNode() {\n    const newItem = document.createElement('li');\n    const id = `pair-${new Date().getTime()}`;\n\n    newItem.classList.add('list__item');\n\n    newItem.innerHTML = `\n      <input\n        class=\"list__item-checkbox\"\n        type=\"checkbox\"\n        id=\"${id}\"\n      />\n\n      <label\n        for=\"${id}\"\n        class=\"list__item-pair\"\n      >\n        ${this.name} = ${this.value}\n      </label>`;\n\n    return newItem;\n  }\n}\n\nmodule.exports = { NameValueNode };\n","'use strict';\n\nconst { NameValueNode } = require('./NameValueNode.js');\n\nclass NameValueList {\n  constructor(list = []) {\n    this.list = list.map(({ name, value }) => new NameValueNode(name, value));\n\n    this.render(); // render list on init in case we have initial data\n  }\n\n  add(name, value) {\n    this.list = [...this.list, new NameValueNode(name, value)];\n  }\n\n  render() {\n    const list = document.querySelector('.list');\n\n    list.innerHTML = '';\n\n    this.list.forEach(item => {\n      list.append(item.node);\n    });\n  }\n\n  sortBy(key) {\n    this.list.sort((a, b) => a[key].localeCompare(b[key]));\n  }\n\n  deleteChecked() {\n    this.list = this.list.filter(item => !item.isChecked);\n  }\n\n  clear() {\n    this.list.length = 0;\n  }\n}\n\nmodule.exports = { NameValueList };\n","'use strict';\n\nconst { InputData } = require('./InputData.js');\nconst { Xml } = require('./Xml.js');\nconst { NameValue } = require('./NameValue.js');\nconst { NameValueList } = require('./NameValueList.js');\n\n// Creating data variable in case we need to store data in the future\nlet data = [];\n\nconst from = document.querySelector('.from');\n\nconst sortByName = document.querySelector('#sort-by-name');\nconst sortByValue = document.querySelector('#sort-by-value');\nconst deleteItems = document.querySelector('#delete');\nconst deleteAll = document.querySelector('#delete-all');\nconst showXML = document.querySelector('#show-xml');\n\nconst nameValueList = new NameValueList(data);\nconst inputData = new InputData();\n\nfrom.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  if (inputData.error) {\n    inputData.setInputError();\n\n    return;\n  }\n\n  const [name, value] = inputData.formattedData;\n\n  nameValueList.add(name, value);\n  nameValueList.render();\n\n  data.push(new NameValue(name, value));\n\n  const xml = new Xml(nameValueList.list);\n\n  xml.render();\n\n  inputData.clear();\n});\n\ninputData.input.addEventListener('input', () => {\n  inputData.removeInputError();\n});\n\nsortByName.addEventListener('click', () => {\n  nameValueList.sortBy('name');\n  nameValueList.render();\n\n  const xml = new Xml(nameValueList.list);\n\n  xml.render();\n});\n\nsortByValue.addEventListener('click', () => {\n  nameValueList.sortBy('value');\n  nameValueList.render();\n\n  const xml = new Xml(nameValueList.list);\n\n  xml.render();\n});\n\ndeleteItems.addEventListener('click', () => {\n  nameValueList.deleteChecked();\n\n  data = nameValueList.list.map(\n    ({ name, value }) => new NameValue(name, value)\n  );\n\n  nameValueList.render();\n\n  const xml = new Xml(nameValueList.list);\n\n  xml.render();\n});\n\ndeleteAll.addEventListener('click', () => {\n  nameValueList.clear();\n\n  data.length = 0;\n\n  nameValueList.render();\n\n  const xml = new Xml(nameValueList.list);\n\n  xml.render();\n});\n\nshowXML.addEventListener('click', () => {\n  const xml = new Xml(nameValueList.list);\n\n  xml.toggle();\n\n  if (!xml.isShown) {\n    showXML.innerHTML = 'Show XML';\n  } else {\n    showXML.innerHTML = 'Hide XML';\n  }\n\n  xml.render();\n});\n"]}